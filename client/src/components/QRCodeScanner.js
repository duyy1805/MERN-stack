import { useEffect, useRef, useState } from "react";
import { Html5Qrcode } from "html5-qrcode";
import { Select, message } from "antd";
import { Button, Modal, Table } from "antd";
import axios from "axios";
import apiConfig from '../apiConfig.json';

export default function QRCodeScanner() {
    const [selectedArea, setSelectedArea] = useState(null); // L∆∞u khu v·ª±c ƒë√£ ch·ªçn
    const scannedRef = useRef(false);
    const scannerRef = useRef(null);
    const selectedAreaRef = useRef(null); // D√πng ƒë·ªÉ l∆∞u gi√° tr·ªã khu v·ª±c m·ªõi nh·∫•t
    const [messageApi, contextHolder] = message.useMessage();
    const [isModalVisible, setIsModalVisible] = useState(false);
    const [pallets, setPallets] = useState([]);

    const columns = [
        { title: "Khu v·ª±c", dataIndex: "area", key: "area" },
        { title: "Pallet Nh·ª±a", dataIndex: "plastic", key: "plastic" },
        { title: "Pallet S·∫Øt", dataIndex: "iron", key: "iron" },
        { title: "Pallet G·ªó", dataIndex: "wood", key: "wood" },
    ];
    useEffect(() => {
        axios.get(`${apiConfig.API_BASE_URL}/B2/getpalletcount`)
            .then((res) => {
                const sortOrder = ["Khu A", "Khu B", "Khu C", "Nh√† th·∫ßu"];

                // Chuy·ªÉn ƒë·ªïi d·ªØ li·ªáu t·ª´ h√†ng th√†nh c·ªôt
                const transformedData = sortOrder.map(area => {
                    const areaPallets = res.data.filter(item => item.ZoneName === area);
                    return {
                        key: area,
                        area,
                        plastic: areaPallets.find(p => p.TypeName === "Nh·ª±a")?.PalletCount || 0,
                        iron: areaPallets.find(p => p.TypeName === "S·∫Øt")?.PalletCount || 0,
                        wood: areaPallets.find(p => p.TypeName === "G·ªó")?.PalletCount || 0,
                    };
                });
                console.log("D·ªØ li·ªáu ƒë√£ chuy·ªÉn:", transformedData);
                setPallets(transformedData);
            })
            .catch((err) => console.error("L·ªói API:", err));
    }, []);

    useEffect(() => {
        selectedAreaRef.current = selectedArea; // C·∫≠p nh·∫≠t gi√° tr·ªã m·ªõi m·ªói l·∫ßn thay ƒë·ªïi
    }, [selectedArea]); // Ch·∫°y l·∫°i khi `selectedArea` thay ƒë·ªïi

    useEffect(() => {
        const scanner = new Html5Qrcode("reader");
        scannerRef.current = scanner;

        const startScanning = async () => {
            if (scanner.isScanning) return;
            try {
                await scanner.start(
                    { facingMode: "environment" },
                    { fps: 10, qrbox: { width: 250, height: 250 } },
                    (decodedText) => handleBarCodeScanned(decodedText),
                    (errorMessage) => console.log("L·ªói qu√©t:", errorMessage)
                );
            } catch (err) {
                console.error("L·ªói kh·ªüi ch·∫°y scanner:", err);
            }
        };

        startScanning();

        return () => {
            if (scanner.isScanning) {
                scanner.stop().catch(() => { });
            }
        };
    }, []);

    const handleBarCodeScanned = async (data) => {
        if (scannedRef.current) return; // Ch·∫∑n qu√©t li√™n t·ª•c
        scannedRef.current = true;

        if (!selectedAreaRef.current) {
            messageApi.warning("‚ö† Vui l√≤ng ch·ªçn khu v·ª±c tr∆∞·ªõc khi qu√©t!", 1.5);
            scannedRef.current = false; // Cho ph√©p qu√©t l·∫°i
            return;
        }

        try {
            const qrObject = JSON.parse(data);
            qrObject.ZoneId = selectedAreaRef.current; // Th√™m khu v·ª±c

            // X√°c ƒë·ªãnh lo·∫°i pallet
            const prefix = qrObject.PalletCode.substring(0, 3); // L·∫•y 3 k√Ω t·ª± ƒë·∫ßu
            const palletTypeMap = { PLN: 1, PLS: 2, PLG: 3 };
            qrObject.PalletTypeId = palletTypeMap[prefix] || null; // G√°n lo·∫°i pallet

            messageApi.success(
                `üì¶ M√£: ${qrObject.PalletCode} - üìç Khu: ${qrObject.ZoneId} - üè∑ Lo·∫°i: ${qrObject.PalletTypeId || "Kh√¥ng x√°c ƒë·ªãnh"}`,
                2
            );
            const response = await axios.post(`${apiConfig.API_BASE_URL}/B2/insertpallet`, {
                PalletCode: qrObject.PalletCode,
                ZoneId: qrObject.ZoneId,
                PalletTypeId: qrObject.PalletTypeId,
            });
            if (response.status === 200) {
                messageApi.success("‚úî c·∫≠p nh·∫≠t th√†nh c√¥ng!", 1.5);
            }
        } catch (error) {
            messageApi.error("‚ùå Invalid QR Data: Kh√¥ng ph·∫£i ƒë·ªãnh d·∫°ng JSON h·ª£p l·ªá!", 1.5);
        }

        setTimeout(() => {
            scannedRef.current = false; // Cho ph√©p qu√©t ti·∫øp
        }, 1000);
    };

    return (
        <div style={{ textAlign: "center", padding: "20px" }}>
            {contextHolder}
            <h2>Qu√©t QR Code</h2>
            <Select
                placeholder="Ch·ªçn khu v·ª±c"
                style={{ width: 200, marginBottom: 10 }}
                onChange={(value) => {
                    setSelectedArea(value);
                    console.log("Khu v·ª±c ƒë√£ ch·ªçn:", value);
                }}
                options={[
                    { value: 1, label: "Khu A" },
                    { value: 2, label: "Khu B" },
                    { value: 3, label: "Khu C" },
                    { value: 4, label: "Nh√† Th·∫ßu" }
                ]}
            />
            <div id="reader" style={{ width: "300px", margin: "auto" }}></div>
            <div style={{ marginTop: 20 }}>
                <Button type="primary" onClick={() => setIsModalVisible(true)}>
                    Xem danh s√°ch Pallet
                </Button>

                <Modal
                    title="Danh s√°ch Pallet"
                    open={isModalVisible}
                    onCancel={() => setIsModalVisible(false)}
                    footer={null}
                    width={window.innerWidth < 768 ? "100%" : "60%"}
                >
                    <Table
                        dataSource={pallets}
                        columns={columns}
                        scroll={{ x: 700, y: 600 }}
                    />
                </Modal>
            </div>
        </div>
    );
}
