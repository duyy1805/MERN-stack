import React, { useEffect, useState } from 'react';
import {
    Row,
    Col,
    Input,
    Table,
    Spin,
    message,
    Button,
    Modal,
    Tooltip,
    Upload,
    Form,
    DatePicker,
    Select,
    Layout,
    Menu,
    Dropdown,
    Avatar,
    Card
} from 'antd';
import { UploadOutlined, SettingOutlined, UserOutlined } from '@ant-design/icons';
import axios from 'axios';
import dayjs from 'dayjs';
import apiConfig from '../../apiConfig.json';
import ViewerPDF from './ViewerPDF';
import { Link, useHistory } from "react-router-dom";
import style from "./Admin.module.css";

const { Search } = Input;
const { Header, Content } = Layout;

const AppHeader = () => {
    const history = useHistory();
    const handleLogout = () => {
        // X√≥a d·ªØ li·ªáu l∆∞u tr·ªØ v√† chuy·ªÉn h∆∞·ªõng
        localStorage.removeItem('accessToken');
        localStorage.removeItem('role');
        localStorage.removeItem('HoTen');
        history.push('/login'); // chuy·ªÉn h∆∞·ªõng v·ªÅ trang login
    };
    const menu = (
        <Menu>
            <Menu.Item key="account">
                <a href="/account">T√†i kho·∫£n</a>
            </Menu.Item>
            <Menu.Item key="settings">
                <a href="/settings">C√†i ƒë·∫∑t</a>
            </Menu.Item>
            <Menu.Item key="logout" onClick={handleLogout}>
                Log Out
            </Menu.Item>
        </Menu>
    );

    return (
        <Header style={{
            display: 'flex',
            justifyContent: 'space-between',
            alignItems: 'center',
            background: '#fff',
            padding: '0 20px'
        }}>
            <div style={{ fontSize: '20px', fontWeight: 'bold' }}>Qu·∫£n l√Ω quy tr√¨nh</div>
            <Dropdown overlay={menu} trigger={['click']}>
                <div style={{ display: 'flex', alignItems: 'center', cursor: 'pointer' }}>
                    <Avatar icon={<UserOutlined />} />
                    <span style={{ marginLeft: '8px' }}>{localStorage.getItem('HoTen')}</span>
                    {/* <SettingOutlined style={{ marginLeft: '8px' }} /> */}
                </div>
            </Dropdown>
        </Header>
    );
};

const Admin = () => {
    const [allData, setAllData] = useState([]); // t·∫•t c·∫£ phi√™n b·∫£n c·ªßa c√°c quy tr√¨nh
    const [data, setData] = useState([]);         // phi√™n b·∫£n m·ªõi nh·∫•t c·ªßa m·ªói quy tr√¨nh
    const [allProcessNames, setAllProcessNames] = useState([]);
    const [allProcessNames_, setAllProcessNames_] = useState([]);
    const [loading, setLoading] = useState(false);

    const [modalVisible, setModalVisible] = useState(false);
    const [modalData, setModalData] = useState([]); // d·ªØ li·ªáu c√°c version c·ªßa quy tr√¨nh ƒë∆∞·ª£c ch·ªçn (m·ªói phi√™n b·∫£n duy nh·∫•t)
    const [modalTitle, setModalTitle] = useState(''); // t√™n quy tr√¨nh ƒë∆∞·ª£c ch·ªçn
    const [modalTitleId, setModalTitleId] = useState(''); // id quy tr√¨nh ƒë∆∞·ª£c ch·ªçn

    const [form] = Form.useForm();
    const [processForm] = Form.useForm();
    const [addProcessModalVisible, setAddProcessModalVisible] = useState(false);
    const [addVersionModalVisible, setAddVersionModalVisible] = useState(false);
    const [file, setFile] = useState(null);
    const [pdfVisible, setPdfVisible] = useState(false);
    const [pdfUrl, setPdfUrl] = useState('');
    const [selectedProcess, setSelectedProcess] = useState(null);
    const [selectedProcess_, setSelectedProcess_] = useState(null);
    // Modal nh·∫≠n x√©t khi xem t√†i li·ªáu
    const [isCommentModalVisible, setIsCommentModalVisible] = useState(false);
    const [currentRecord, setCurrentRecord] = useState(null);
    const [comment, setComment] = useState('');

    // Modal tr·∫°ng th√°i ng∆∞·ªùi d√πng c·ªßa 1 version
    const [statusModalVisible, setStatusModalVisible] = useState(false);
    const [statusData, setStatusData] = useState([]);

    const [messageApi, contextHolder] = message.useMessage();
    const currentRole = localStorage.getItem('role');

    // H√†m x·ª≠ l√Ω khi ng∆∞·ªùi d√πng x√°c nh·∫≠n nh·∫≠n x√©t
    const handleConfirmComment = async () => {
        try {
            const userId = localStorage.getItem('userId');
            await axios.post(`${apiConfig.API_BASE_URL}/B8/markAsViewed`, {
                NguoiDungId: parseInt(userId),
                QuyTrinhVersionId: currentRecord.VersionId,
                NhanXet: comment
            });
            message.success("ƒê√£ ƒë√°nh d·∫•u t√†i li·ªáu l√† ƒë√£ xem v√† ghi nh·∫≠n nh·∫≠n x√©t!");
        } catch (error) {
            message.error("C√≥ l·ªói x·∫£y ra khi ƒë√°nh d·∫•u ƒë√£ xem: " + error.message);
        } finally {
            setIsCommentModalVisible(false);
            setComment('');
        }
    };

    const handleOpenCommentModal = () => {
        setIsCommentModalVisible(true);
    };

    // X·ª≠ l√Ω khi ch·ªçn file
    const handleFileChange = (info) => {
        console.log("Upload info:", info);
        if (info.fileList && info.fileList.length > 0) {
            setFile(info.fileList[0].originFileObj);
        }
    };

    const fetchData = async () => {
        setLoading(true);
        try {
            const res = await axios.get(`${apiConfig.API_BASE_URL}/B8/quytrinhall`);
            const list = res.data;
            setAllData(list);
            setData(getLatestVersions(list));

            const names = Array.from(
                new Set(list.map((item) => item.BoPhanBanHanh).filter(Boolean))
            );
            setAllProcessNames(names);
        } catch (error) {
            message.error('L·ªói khi l·∫•y d·ªØ li·ªáu: ' + error.message);
        } finally {
            setLoading(false);

            handleSelectProcess(selectedProcess);
            setSelectedProcess_(selectedProcess_);
            // setAllProcessNames_([]);
        }
    };

    // Khi ng∆∞·ªùi d√πng click v√†o 1 h√†ng, m·ªü PDF ngay l·∫≠p t·ª©c
    const handleViewPdf = async (record) => {
        setCurrentRecord(record);
        if (record.PhienBan === null) {
            messageApi.open({
                type: 'error',
                content: `Phi√™n b·∫£n kh√¥ng t·ªìn t·∫°i!`,
            });
        }
        else {
            try {
                const url = `${apiConfig.API_BASE_URL}/B8/viewPDF?QuyTrinhVersionId=${record.QuyTrinhVersionId}`;
                setPdfUrl(url);
                setPdfVisible(true);
            } catch (error) {
                messageApi.open({
                    type: 'error',
                    content: `L·ªói xem PDF: ${error.message}`,
                });
            }
        }
    };

    // X·ª≠ l√Ω submit form th√™m quy tr√¨nh m·ªõi
    const handleAddProcess = async () => {
        try {
            const values = await processForm.validateFields();
            // G·ªçi API th√™m quy tr√¨nh
            await axios.post(`${apiConfig.API_BASE_URL}/B8/themquytrinh`, values);
            message.success("Th√™m quy tr√¨nh th√†nh c√¥ng!");
            setAddProcessModalVisible(false);
            processForm.resetFields();
            await fetchData();
            setSelectedProcess(null);
        } catch (error) {
            message.error("L·ªói th√™m quy tr√¨nh: " + error.response?.data || error.message);
        }
    };

    const handleAddVersion = async () => {
        try {
            setLoading(true);
            const values = await form.validateFields();
            if (!file) {
                messageApi.open({ type: 'error', content: `Vui l√≤ng t·∫£i l√™n file PDF!` });
                return;
            }

            const formData = new FormData();
            formData.append('QuyTrinhId', modalTitleId);
            formData.append('TenQuyTrinh', modalTitle);
            formData.append('PhienBan', values.PhienBan);
            formData.append('NgayHieuLuc', values.NgayHieuLuc.format('YYYY-MM-DD'));
            formData.append('File', file);
            formData.append('CurrentUrl', window.location.href);
            values.BoPhanIds.forEach(id => formData.append('BoPhanIds', id));

            // Log t·∫•t c·∫£ d·ªØ li·ªáu trong FormData
            console.log("üìå D·ªØ li·ªáu FormData:");
            for (let pair of formData.entries()) {
                console.log(`${pair[0]}: ${pair[1]}`);
            }
            await axios.post(`${apiConfig.API_BASE_URL}/B8/themquytrinhversion`, formData, {
                headers: { 'Content-Type': 'multipart/form-data' }
            });

            messageApi.open({ type: 'success', content: `Th√™m phi√™n b·∫£n th√†nh c√¥ng!` });
            await fetchData();
            setAddVersionModalVisible(false);
            form.resetFields();
            setFile(null);
        } catch (error) {
            message.error(`L·ªói: ${error.message}`);
        }
        finally {
            setLoading(false);
        }
    };


    const optionsSelect = Array.from(
        new Set(data.map((item) => item.TenQuyTrinh).filter(Boolean))
    ).map((uniqueName) => ({
        label: uniqueName,
        value: uniqueName,
    }));

    const createFilters = (key) => {
        const uniqueValues = [...new Set(data.map((item) => item[key]))];
        return uniqueValues.map((value) => ({
            text: value,
            value,
        }));
    };

    const uniqueBoPhan = [...new Set(allData
        .map(item => item.BoPhan)
        .filter(bp => bp))] // Lo·∫°i b·ªè gi√° tr·ªã NULL ho·∫∑c r·ªóng

    const boPhanOptions = uniqueBoPhan.map(bp => ({
        value: bp,
        label: bp
    }));
    const LPTFilters = createFilters('BoPhanBanHanh');
    // C√°c c·ªôt cho b·∫£ng ch√≠nh (phi√™n b·∫£n m·ªõi nh·∫•t c·ªßa m·ªói quy tr√¨nh)
    const columns = [
        {
            title: 'M√£ Quy Tr√¨nh',
            dataIndex: 'MaSo',
            key: 'MaSo',
        },
        {
            title: 'T√™n Quy Tr√¨nh',
            dataIndex: 'TenQuyTrinh',
            key: 'TenQuyTrinh',
            width: '30%',
            render: (text) =>
                text && text.length > 50 ? (
                    <Tooltip title={text}>
                        <span>{text.slice(0, 50)}...</span>
                    </Tooltip>
                ) : (
                    text
                ),
        },
        {
            title: 'B·ªô ph·∫≠n ban h√†nh',
            dataIndex: 'BoPhanBanHanh',
            key: 'BoPhanBanHanh',
            width: '15%',
            align: "center",
            filters: LPTFilters,
            filterSearch: true,
            onFilter: (value, record) => record.BoPhanBanHanh.includes(value),
        },
        {
            title: 'Phi√™n b·∫£n',
            dataIndex: 'FilePDF',
            key: 'FilePDF',
            align: "center",
            render: (text, record) => {
                if (record.PhienBan === null) {
                    return <span>Ch∆∞a c√≥ phi√™n b·∫£n</span>;
                }
                const downloadUrl = `${apiConfig.API_BASE_URL}/B8/downloadPDF?QuyTrinhVersionId=${record.QuyTrinhVersionId}`;
                return <a href={downloadUrl} target="_blank" rel="noopener noreferrer" onClick={(e) => e.stopPropagation()}>{record.PhienBan}</a>;
            },
        },
        {
            title: 'Ng√†y Hi·ªáu L·ª±c',
            dataIndex: 'NgayHieuLuc',
            key: 'NgayHieuLuc',
            align: "center",
            render: (date) => date ? dayjs(date).format('YYYY-MM-DD') : '',
        },
        {
            title: 'Ng√†y T·∫°o',
            dataIndex: 'NgayTao',
            key: 'NgayTao',
            render: (date) => date ? dayjs(date).format('YYYY-MM-DD') : '',
        },
        {
            title: 'Chi Ti·∫øt',
            key: 'action',
            render: (text, record) => (
                <Button
                    type="primary"
                    onClick={(e) => { e.stopPropagation(); handleViewDetails(record.QuyTrinhId, record.TenQuyTrinh); }}
                >
                    Xem t·∫•t c·∫£
                </Button>
            ),
        },
    ];

    // H√†m l·∫•y d·ªØ li·ªáu t·ª´ API khi component mount
    useEffect(() => {
        fetchData();
    }, []);

    // H√†m l·ªçc ƒë·ªÉ l·∫•y phi√™n b·∫£n m·ªõi nh·∫•t cho m·ªói QuyTrinh (theo QuyTrinhId)
    const getLatestVersions = (list) => {
        const grouped = {};
        list.forEach(item => {
            const key = item.QuyTrinhId;
            const version = parseFloat(item.PhienBan); // Chuy·ªÉn ƒë·ªïi th√†nh s·ªë

            if (!grouped[key] || version > parseFloat(grouped[key].PhienBan)) {
                grouped[key] = item;
            }
        });
        // S·∫Øp x·∫øp theo th·ª© t·ª± gi·∫£m d·∫ßn c·ªßa PhienBan
        return Object.values(grouped).sort((a, b) => b.NgayTao - a.NgayTao);
    };

    // H√†m t√¨m ki·∫øm theo t√™n quy tr√¨nh (l·ªçc tr√™n d·ªØ li·ªáu phi√™n b·∫£n m·ªõi nh·∫•t)
    const onSearch = (value) => {
        const filtered = getLatestVersions(allData).filter(item =>
            item.TenQuyTrinh && item.TenQuyTrinh.toLowerCase().includes(value.toLowerCase())
        );
        setData(filtered);
    };
    const handleViewDetails = (QuyTrinhId, TenQuyTrinh) => {
        // L·∫•y t·∫•t c·∫£ c√°c d√≤ng c√≥ c√πng QuyTrinhId ƒë∆∞·ª£c ch·ªçn
        const details = allData.filter(item => item.QuyTrinhId === QuyTrinhId);

        // Nh√≥m d·ªØ li·ªáu theo QuyTrinhVersionId: m·ªói QuyTrinhVersionId ch·ªâ l·∫•y d√≤ng ƒë·∫ßu ti√™n g·∫∑p ƒë∆∞·ª£c
        const uniqueVersionsMap = new Map();
        details.forEach(item => {
            if (!uniqueVersionsMap.has(item.QuyTrinhVersionId)) {
                uniqueVersionsMap.set(item.QuyTrinhVersionId, item);
            }
        });

        const uniqueVersions = Array.from(uniqueVersionsMap.values());
        // S·∫Øp x·∫øp theo phi√™n b·∫£n gi·∫£m d·∫ßn (gi·∫£ s·ª≠ tr∆∞·ªùng PhienBan l√† s·ªë)
        uniqueVersions.sort((a, b) => b.PhienBan - a.PhienBan);

        setModalData(uniqueVersions);
        setModalTitle(TenQuyTrinh);
        setModalTitleId(QuyTrinhId);
        setModalVisible(true);
    };

    const handleSelectProcess = (value) => {
        setSelectedProcess(value);
        if (value) {
            const filteredData = getLatestVersions(
                allData.filter((item) => item.BoPhanBanHanh === value)
            );
            const names_ = Array.from(
                new Set(
                    allData
                        .filter(item => value.includes(item.BoPhanBanHanh)) // Ch·ªâ l·∫•y nh·ªØng item c√≥ BoPhanBanHanh thu·ªôc names
                        .map(item => item.TenQuyTrinh) // L·∫•y TenQuyTrinh
                        .filter(Boolean) // Lo·∫°i b·ªè gi√° tr·ªã null ho·∫∑c undefined
                )
            );
            console.log(names_);
            setAllProcessNames_(names_);
            setData(filteredData);
        } else {
            setSelectedProcess_(null);
            setAllProcessNames_([]);
            setData([]); // N·∫øu kh√¥ng ch·ªçn g√¨, hi·ªÉn th·ªã to√†n b·ªô
        }
    };

    const handleSelectProcess_ = (value) => {
        setSelectedProcess_(value);
        if (value) {
            const filteredData = getLatestVersions(
                allData.filter((item) => item.TenQuyTrinh === value)
            );
            setData(filteredData);
        } else {
            const filteredData = getLatestVersions(
                allData.filter((item) => item.BoPhanBanHanh === selectedProcess)
            );
            setData(filteredData);
        }
    };
    // H√†m x·ª≠ l√Ω x√°c nh·∫≠n
    const confirmField = async (record, field) => {
        const HoTen = localStorage.getItem('HoTen');
        const userId = localStorage.getItem('userId');
        console.log(`X√°c nh·∫≠n ${field} cho phi√™n b·∫£n ${record.VersionId} c·ªßa ${userId}`);
        try {
            await axios.post(`${apiConfig.API_BASE_URL}/B8/confirm`, {
                VersionId: record.VersionId,
                field, // Tr∆∞·ªùng c·∫ßn c·∫≠p nh·∫≠t
                HoTen,
                userId,
            });
            message.success(`X√°c nh·∫≠n ${field} th√†nh c√¥ng!`);
            // C·∫≠p nh·∫≠t l·∫°i state
            setAllData(prevData =>
                prevData.map(item =>
                    item.VersionId === record.VersionId ? { ...item, [field]: HoTen } : item
                )
            );
            setData(getLatestVersions(allData.map(item =>
                item.VersionId === record.VersionId ? { ...item, [field]: HoTen } : item
            )));
        } catch (error) {
            message.error(error.response?.data?.message || `L·ªói x√°c nh·∫≠n ${field}`);
        }
    };

    // ----- C√°c c·ªôt cho Modal "Xem chi ti·∫øt" ch·ªâ hi·ªÉn th·ªã th√¥ng tin Version -----
    const modalVersionColumns = [
        {
            title: 'Phi√™n b·∫£n',
            dataIndex: 'FilePDF',
            key: 'FilePDF',
            align: "center",
            render: (text, record) => {
                if (record.PhienBan === null) {
                    return <span>Ch∆∞a c√≥ phi√™n b·∫£n</span>;
                }
                const downloadUrl = `${apiConfig.API_BASE_URL}/B8/downloadPDF?QuyTrinhVersionId=${record.QuyTrinhVersionId}`;
                return <a href={downloadUrl} target="_blank" rel="noopener noreferrer" onClick={(e) => e.stopPropagation()}>{record.PhienBan}</a>;
            },
        },
        {
            title: 'Ng√†y Hi·ªáu L·ª±c',
            dataIndex: 'NgayHieuLuc',
            key: 'NgayHieuLuc',
            align: "center",
            render: (date) => date ? dayjs(date).format('YYYY-MM-DD') : '',
        },
        {
            title: 'Chi Ti·∫øt',
            key: 'action',
            align: "center",
            render: (text, record) => (
                <Button
                    type="primary"
                    onClick={(e) => { e.stopPropagation(); handleViewStatus(record); }}
                >
                    Xem t·∫•t c·∫£
                </Button>
            ),
        },
    ];

    // H√†m m·ªü Modal tr·∫°ng th√°i (danh s√°ch ng∆∞·ªùi d√πng cho version ƒë∆∞·ª£c ch·ªçn)
    const handleViewStatus = (record) => {
        // Ki·ªÉm tra n·∫øu BoPhanGui b·ªã null ho·∫∑c undefined th√¨ g√°n m·∫£ng r·ªóng []
        const boPhanGuiArray = record.BoPhanGui ? record.BoPhanGui.split(',') : [];

        // L·ªçc d·ªØ li·ªáu d·ª±a tr√™n VersionId v√† BoPhan c√≥ trong BoPhanGui
        const usersData = allData.filter(item =>
            item.QuyTrinhVersionId === record.QuyTrinhVersionId &&
            // (boPhanGuiArray.length === 0 || boPhanGuiArray.includes(item.BoPhan)) && 
            item.ChucVu !== "admin" // Lo·∫°i b·ªè admin
        );

        setStatusData(usersData);
        setStatusModalVisible(true);
    };
    const homNay = dayjs();

    // L·ªçc t√†i li·ªáu m·ªõi (trong 30 ng√†y g·∫ßn ƒë√¢y)
    const taiLieuMoi = allData.filter(record => {
        if (!record.NgayTao) return false;
        const ngayTao = dayjs(record.NgayTao);
        return homNay.diff(ngayTao, "day") < 30;
    });
    const uniqueQuyTrinh = new Set(taiLieuMoi.map(record => `${record.TenQuyTrinh}_${record.QuyTrinhVersionId}`));
    const soQuyTrinhKhacNhau = uniqueQuyTrinh.size;

    return (
        <Layout className={style.admin}>
            <Content style={{ padding: 10, backgroundColor: '#162f48' }}>
                {contextHolder}
                <Row gutter={[16, 16]}>
                    <Col xs={24} sm={8}>
                        <Card style={{ backgroundColor: '#001529', border: 'none' }}>
                            <Select
                                showSearch
                                size="large"
                                value={selectedProcess}
                                onChange={handleSelectProcess}
                                allowClear
                                placeholder="Ch·ªçn b·ªô ph·∫≠n"
                                style={{ width: '100%' }}
                                options={allProcessNames.map(name => ({ label: name, value: name }))}
                            />
                        </Card>
                    </Col>
                    <Col xs={24} sm={8}>
                        <Card style={{ backgroundColor: '#001529', border: 'none' }}>
                            <Select
                                showSearch
                                size="large"
                                value={selectedProcess_}
                                onChange={handleSelectProcess_}
                                allowClear
                                placeholder="Ch·ªçn t√†i li·ªáu"
                                style={{ width: '100%' }}
                                options={allProcessNames_.map(name => ({ label: name, value: name }))}
                            />
                        </Card>
                    </Col>
                    <Col xs={24} sm={4}>
                        <Card style={{ backgroundColor: '#001529', border: 'none' }}>
                            <div style={{ display: 'flex', justifyContent: 'center' }}>
                                <Button type="primary" onClick={() => setAddProcessModalVisible(true)}>Th√™m quy tr√¨nh m·ªõi</Button>
                            </div>
                        </Card>
                    </Col>
                    {/* B·∫£ng phi√™n b·∫£n m·ªõi nh·∫•t */}
                    <Col xs={24} sm={24}>
                        {selectedProcess && (
                            <Card style={{ backgroundColor: '#001529', border: 'none' }}>
                                {loading ? <Spin /> : (
                                    <Table
                                        dataSource={data}
                                        columns={columns}
                                        rowKey="VersionId"
                                        scroll={{ y: 55 * 9 }}
                                        onRow={(record) => ({
                                            onClick: () => handleViewPdf(record),
                                        })}
                                    />
                                )}
                            </Card>
                        )}

                    </Col>
                </Row>
                {/* --- Modal "Xem t·∫•t c·∫£ c√°c phi√™n b·∫£n" --- */}
                <Modal
                    title={modalTitle}
                    visible={modalVisible}
                    onCancel={() => setModalVisible(false)}
                    footer={[
                        <Button key="add" type="primary" onClick={() => setAddVersionModalVisible(true)}>
                            Th√™m Version
                        </Button>,
                        <Button key="close" onClick={() => setModalVisible(false)}>
                            ƒê√≥ng
                        </Button>
                    ]}
                    className={style.modalVersions}
                    width={1000}
                    style={{ backgroundColor: '#001529' }}
                >
                    <Table
                        dataSource={modalData}
                        columns={modalVersionColumns}
                        rowKey="VersionId"
                        pagination={false}
                        className={style.tableVersions}
                        scroll={{ y: 55 * 9 }}
                        onRow={(record) => ({
                            onClick: () => { setModalVisible(false); handleViewPdf(record) }
                        })}
                    />
                    {/* --- Modal Th√™m Version --- */}
                    <Modal
                        title="Th√™m Version M·ªõi"
                        visible={addVersionModalVisible}
                        onCancel={() => setAddVersionModalVisible(false)}
                        className={style.modalVersions}
                        footer={[
                            <Button key="cancel" onClick={() => setAddVersionModalVisible(false)}>
                                H·ªßy
                            </Button>,
                            <Button key="submit" type="primary" onClick={handleAddVersion} loading={loading}>
                                L∆∞u
                            </Button>
                        ]}
                    >
                        <Form form={form} layout="vertical" className={style.formAddVersion}>
                            <Form.Item
                                label="Phi√™n B·∫£n"
                                name="PhienBan"
                                rules={[{ required: true, message: 'Vui l√≤ng nh·∫≠p phi√™n b·∫£n!' }]}
                            >
                                <Input placeholder="Nh·∫≠p s·ªë phi√™n b·∫£n" />
                            </Form.Item>
                            <Form.Item
                                label="Ng√†y Hi·ªáu L·ª±c"
                                name="NgayHieuLuc"
                                rules={[{ required: true, message: 'Vui l√≤ng ch·ªçn ng√†y hi·ªáu l·ª±c!' }]}
                            >
                                <DatePicker format="YYYY-MM-DD" />
                            </Form.Item>
                            <Form.Item
                                label="B·ªô ph·∫≠n ƒë∆∞·ª£c ph√¢n ph·ªëi"
                                name="BoPhanIds"
                                rules={[{ required: true, message: 'Vui l√≤ng ch·ªçn b·ªô ph·∫≠n!' }]}
                            >
                                <Select
                                    mode="multiple"
                                    placeholder="B·ªô ph·∫≠n ƒë∆∞·ª£c ph√¢n ph·ªëi"
                                    options={boPhanOptions} // Danh s√°ch b·ªô ph·∫≠n l·∫•y t·ª´ API
                                />
                            </Form.Item>
                            <Form.Item
                                label="T·∫£i l√™n file PDF"
                                name="File"
                                rules={[{ required: true, message: 'Vui l√≤ng t·∫£i l√™n file PDF!' }]}
                            >
                                <Upload
                                    beforeUpload={() => false}
                                    onChange={handleFileChange}
                                    accept=".pdf"
                                >
                                    <Button icon={<UploadOutlined />}>Ch·ªçn File</Button>
                                </Upload>
                            </Form.Item>
                        </Form>
                    </Modal>
                </Modal>
                {/* --- Modal Nh·∫≠p nh·∫≠n x√©t --- */}
                <Modal
                    title="Nh·∫≠p nh·∫≠n x√©t"
                    visible={isCommentModalVisible}
                    onOk={handleConfirmComment}
                    onCancel={() => setIsCommentModalVisible(false)}
                    okText="X√°c nh·∫≠n"
                    cancelText="H·ªßy"
                    className={style.modalComment}
                >
                    <p>Nh·∫≠p nh·∫≠n x√©t c·ªßa b·∫°n:</p>
                    <Input.TextArea
                        rows={4}
                        placeholder="Nh·∫≠p nh·∫≠n x√©t (n·∫øu c√≥)"
                        value={comment}
                        onChange={(e) => setComment(e.target.value)}
                    />
                </Modal>
                {/* --- Modal tr·∫°ng th√°i ng∆∞·ªùi d√πng c·ªßa phi√™n b·∫£n --- */}
                <Modal
                    className={style.modalVersions}
                    title="Tr·∫°ng th√°i ng∆∞·ªùi nh·∫≠n"
                    visible={statusModalVisible}
                    onCancel={() => setStatusModalVisible(false)}
                    width={1000}
                    footer={[
                        <Button key="close" onClick={() => setStatusModalVisible(false)}>
                            ƒê√≥ng
                        </Button>
                    ]}
                >
                    <Table
                        dataSource={statusData}
                        className={style.tableVersions}
                        scroll={{ y: 55 * 9 }}
                        rowClassName={(record) => record.TrangThai === 'Ch∆∞a xem' ? style.notViewed : ''}
                        columns={[
                            {
                                title: 'T√™n ng∆∞·ªùi d√πng',
                                dataIndex: 'HoTen',
                                key: 'HoTen',
                            },
                            {
                                title: 'B·ªô ph·∫≠n',
                                dataIndex: 'BoPhan', // ƒêi·ªÅu ch·ªânh key n·∫øu t√™n field kh√°c (vd: 'Ch·ª©c v·ª•')
                                key: 'BoPhan',
                            },
                            {
                                title: 'Tr·∫°ng th√°i',
                                dataIndex: 'TrangThai',
                                key: 'TrangThai',
                            },
                            {
                                title: 'Ng√†y xem',
                                dataIndex: 'NgayXem',
                                key: 'NgayXem',
                                render: (date) => date ? dayjs(date).format('YYYY-MM-DD HH:mm:ss') : '',
                            },
                            {
                                title: 'Nh·∫≠n x√©t',
                                dataIndex: 'NhanXet',
                                key: 'NhanXet',
                            },
                            {
                                title: 'Ghi ch√∫',
                                key: 'GhiChu',
                                render: (_, record) => {
                                    // Ki·ªÉm tra BoPhanGui c√≥ null kh√¥ng
                                    const boPhanGuiArray = record.BoPhanGui ? record.BoPhanGui.split(',') : [];
                                    return boPhanGuiArray.includes(record.BoPhan) ? 'ƒê∆∞·ª£c g·ª≠i mail' : '';
                                }
                            }
                        ]}
                        rowKey={(record, index) => `${record.VersionId}_${index}`}
                        pagination={false}
                    />
                </Modal>
                <Modal
                    title="Th√™m Quy Tr√¨nh M·ªõi"
                    visible={addProcessModalVisible}
                    onCancel={() => setAddProcessModalVisible(false)}
                    className={style.modalVersions}
                    footer={[
                        <Button key="cancel" onClick={() => setAddProcessModalVisible(false)}>
                            H·ªßy
                        </Button>,
                        <Button key="submit" type="primary" onClick={handleAddProcess}>
                            L∆∞u
                        </Button>
                    ]}
                >
                    <Form form={processForm} className={style.formAddVersion} layout="vertical">
                        <Form.Item
                            label="M√£ Quy Tr√¨nh"
                            name="MaSo"
                            rules={[{ required: true, message: 'Vui l√≤ng nh·∫≠p M√£ S·ªë!' }]}
                        >
                            <Input placeholder="Nh·∫≠p m√£ quy tr√¨nh" />
                        </Form.Item>
                        <Form.Item
                            label="T√™n Quy Tr√¨nh"
                            name="TenQuyTrinh"
                            rules={[{ required: true, message: 'Vui l√≤ng nh·∫≠p T√™n Quy Tr√¨nh!' }]}
                        >
                            <Input placeholder="Nh·∫≠p t√™n quy tr√¨nh" />
                        </Form.Item>
                        <Form.Item
                            label="B·ªô ph·∫≠n ban h√†nh"
                            name="BoPhanBanHanh"
                            rules={[{ required: true, message: 'Vui l√≤ng nh·∫≠p B·ªô ph·∫≠n ban h√†nh!' }]}
                        >
                            <Select
                                placeholder="Ch·ªçn b·ªô ph·∫≠n ban h√†nh"
                                options={boPhanOptions} // Danh s√°ch b·ªô ph·∫≠n l·∫•y t·ª´ API
                            />
                        </Form.Item>
                    </Form>
                </Modal>
                {pdfVisible && (
                    <ViewerPDF
                        fileUrl={pdfUrl}
                        onClose={() => { setPdfVisible(false) }}
                        onComment={handleOpenCommentModal}
                    />
                )}
            </Content>
        </Layout>
    );
};

export default Admin;
